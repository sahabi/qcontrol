/* Auto-generated by genmsg_cpp for file /home/sahabi/ws/sandbox/quad_control/srv/Traj.srv */
#ifndef QUAD_CONTROL_SERVICE_TRAJ_H
#define QUAD_CONTROL_SERVICE_TRAJ_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "quad_control/trajData.h"

namespace quad_control
{
template <class ContainerAllocator>
struct TrajRequest_ {
  typedef TrajRequest_<ContainerAllocator> Type;

  TrajRequest_()
  : init_pos(0.0)
  , final_pos(0.0)
  , init_vel(0.0)
  , final_vel(0.0)
  , init_acc(0.0)
  , final_acc(0.0)
  , init_time(0.0)
  , final_time(0.0)
  , sampling_rate(0.0)
  {
  }

  TrajRequest_(const ContainerAllocator& _alloc)
  : init_pos(0.0)
  , final_pos(0.0)
  , init_vel(0.0)
  , final_vel(0.0)
  , init_acc(0.0)
  , final_acc(0.0)
  , init_time(0.0)
  , final_time(0.0)
  , sampling_rate(0.0)
  {
  }

  typedef float _init_pos_type;
  float init_pos;

  typedef float _final_pos_type;
  float final_pos;

  typedef float _init_vel_type;
  float init_vel;

  typedef float _final_vel_type;
  float final_vel;

  typedef float _init_acc_type;
  float init_acc;

  typedef float _final_acc_type;
  float final_acc;

  typedef float _init_time_type;
  float init_time;

  typedef float _final_time_type;
  float final_time;

  typedef float _sampling_rate_type;
  float sampling_rate;


  typedef boost::shared_ptr< ::quad_control::TrajRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quad_control::TrajRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct TrajRequest
typedef  ::quad_control::TrajRequest_<std::allocator<void> > TrajRequest;

typedef boost::shared_ptr< ::quad_control::TrajRequest> TrajRequestPtr;
typedef boost::shared_ptr< ::quad_control::TrajRequest const> TrajRequestConstPtr;



template <class ContainerAllocator>
struct TrajResponse_ {
  typedef TrajResponse_<ContainerAllocator> Type;

  TrajResponse_()
  : trajectory()
  {
  }

  TrajResponse_(const ContainerAllocator& _alloc)
  : trajectory(_alloc)
  {
  }

  typedef std::vector< ::quad_control::trajData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::quad_control::trajData_<ContainerAllocator> >::other >  _trajectory_type;
  std::vector< ::quad_control::trajData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::quad_control::trajData_<ContainerAllocator> >::other >  trajectory;


  typedef boost::shared_ptr< ::quad_control::TrajResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quad_control::TrajResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct TrajResponse
typedef  ::quad_control::TrajResponse_<std::allocator<void> > TrajResponse;

typedef boost::shared_ptr< ::quad_control::TrajResponse> TrajResponsePtr;
typedef boost::shared_ptr< ::quad_control::TrajResponse const> TrajResponseConstPtr;


struct Traj
{

typedef TrajRequest Request;
typedef TrajResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Traj
} // namespace quad_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::quad_control::TrajRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::quad_control::TrajRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::quad_control::TrajRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "025e67c629c573d32982a58fcfdb24b6";
  }

  static const char* value(const  ::quad_control::TrajRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x025e67c629c573d3ULL;
  static const uint64_t static_value2 = 0x2982a58fcfdb24b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::quad_control::TrajRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "quad_control/TrajRequest";
  }

  static const char* value(const  ::quad_control::TrajRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::quad_control::TrajRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 init_pos\n\
float32 final_pos\n\
float32 init_vel\n\
float32 final_vel\n\
float32 init_acc\n\
float32 final_acc\n\
float32 init_time\n\
float32 final_time\n\
float32 sampling_rate\n\
\n\
";
  }

  static const char* value(const  ::quad_control::TrajRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::quad_control::TrajRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::quad_control::TrajResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::quad_control::TrajResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::quad_control::TrajResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6800fddd4bf810897f1a5feb2ba6d4b2";
  }

  static const char* value(const  ::quad_control::TrajResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6800fddd4bf81089ULL;
  static const uint64_t static_value2 = 0x7f1a5feb2ba6d4b2ULL;
};

template<class ContainerAllocator>
struct DataType< ::quad_control::TrajResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "quad_control/TrajResponse";
  }

  static const char* value(const  ::quad_control::TrajResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::quad_control::TrajResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "trajData[] trajectory\n\
\n\
================================================================================\n\
MSG: quad_control/trajData\n\
float32 time\n\
float32 position\n\
float32 velocity\n\
float32 acceleration\n\
";
  }

  static const char* value(const  ::quad_control::TrajResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::quad_control::TrajRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.init_pos);
    stream.next(m.final_pos);
    stream.next(m.init_vel);
    stream.next(m.final_vel);
    stream.next(m.init_acc);
    stream.next(m.final_acc);
    stream.next(m.init_time);
    stream.next(m.final_time);
    stream.next(m.sampling_rate);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TrajRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::quad_control::TrajResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.trajectory);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TrajResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<quad_control::Traj> {
  static const char* value() 
  {
    return "b34c5671dcf19005ee626e993664b8b1";
  }

  static const char* value(const quad_control::Traj&) { return value(); } 
};

template<>
struct DataType<quad_control::Traj> {
  static const char* value() 
  {
    return "quad_control/Traj";
  }

  static const char* value(const quad_control::Traj&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<quad_control::TrajRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b34c5671dcf19005ee626e993664b8b1";
  }

  static const char* value(const quad_control::TrajRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<quad_control::TrajRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "quad_control/Traj";
  }

  static const char* value(const quad_control::TrajRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<quad_control::TrajResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b34c5671dcf19005ee626e993664b8b1";
  }

  static const char* value(const quad_control::TrajResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<quad_control::TrajResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "quad_control/Traj";
  }

  static const char* value(const quad_control::TrajResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // QUAD_CONTROL_SERVICE_TRAJ_H

