/* Auto-generated by genmsg_cpp for file /home/sahabi/ws/sandbox/beginner_tutorials/srv/AddTwoInts.srv */
#ifndef BEGINNER_TUTORIALS_SERVICE_ADDTWOINTS_H
#define BEGINNER_TUTORIALS_SERVICE_ADDTWOINTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "beginner_tutorials/trajData.h"

namespace beginner_tutorials
{
template <class ContainerAllocator>
struct AddTwoIntsRequest_ {
  typedef AddTwoIntsRequest_<ContainerAllocator> Type;

  AddTwoIntsRequest_()
  : a(0.0)
  , b(0.0)
  , c(0.0)
  , d(0.0)
  , e(0.0)
  , f(0.0)
  , g(0.0)
  , h(0.0)
  , i(0.0)
  {
  }

  AddTwoIntsRequest_(const ContainerAllocator& _alloc)
  : a(0.0)
  , b(0.0)
  , c(0.0)
  , d(0.0)
  , e(0.0)
  , f(0.0)
  , g(0.0)
  , h(0.0)
  , i(0.0)
  {
  }

  typedef float _a_type;
  float a;

  typedef float _b_type;
  float b;

  typedef float _c_type;
  float c;

  typedef float _d_type;
  float d;

  typedef float _e_type;
  float e;

  typedef float _f_type;
  float f;

  typedef float _g_type;
  float g;

  typedef float _h_type;
  float h;

  typedef float _i_type;
  float i;


  typedef boost::shared_ptr< ::beginner_tutorials::AddTwoIntsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beginner_tutorials::AddTwoIntsRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct AddTwoIntsRequest
typedef  ::beginner_tutorials::AddTwoIntsRequest_<std::allocator<void> > AddTwoIntsRequest;

typedef boost::shared_ptr< ::beginner_tutorials::AddTwoIntsRequest> AddTwoIntsRequestPtr;
typedef boost::shared_ptr< ::beginner_tutorials::AddTwoIntsRequest const> AddTwoIntsRequestConstPtr;



template <class ContainerAllocator>
struct AddTwoIntsResponse_ {
  typedef AddTwoIntsResponse_<ContainerAllocator> Type;

  AddTwoIntsResponse_()
  : trajectory()
  {
  }

  AddTwoIntsResponse_(const ContainerAllocator& _alloc)
  : trajectory(_alloc)
  {
  }

  typedef std::vector< ::beginner_tutorials::trajData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::beginner_tutorials::trajData_<ContainerAllocator> >::other >  _trajectory_type;
  std::vector< ::beginner_tutorials::trajData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::beginner_tutorials::trajData_<ContainerAllocator> >::other >  trajectory;


  typedef boost::shared_ptr< ::beginner_tutorials::AddTwoIntsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beginner_tutorials::AddTwoIntsResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct AddTwoIntsResponse
typedef  ::beginner_tutorials::AddTwoIntsResponse_<std::allocator<void> > AddTwoIntsResponse;

typedef boost::shared_ptr< ::beginner_tutorials::AddTwoIntsResponse> AddTwoIntsResponsePtr;
typedef boost::shared_ptr< ::beginner_tutorials::AddTwoIntsResponse const> AddTwoIntsResponseConstPtr;


struct AddTwoInts
{

typedef AddTwoIntsRequest Request;
typedef AddTwoIntsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct AddTwoInts
} // namespace beginner_tutorials

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::beginner_tutorials::AddTwoIntsRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::beginner_tutorials::AddTwoIntsRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::beginner_tutorials::AddTwoIntsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "14918f4d2baa4a78439836d5a3120174";
  }

  static const char* value(const  ::beginner_tutorials::AddTwoIntsRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x14918f4d2baa4a78ULL;
  static const uint64_t static_value2 = 0x439836d5a3120174ULL;
};

template<class ContainerAllocator>
struct DataType< ::beginner_tutorials::AddTwoIntsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "beginner_tutorials/AddTwoIntsRequest";
  }

  static const char* value(const  ::beginner_tutorials::AddTwoIntsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::beginner_tutorials::AddTwoIntsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 a\n\
float32 b\n\
float32 c\n\
float32 d\n\
float32 e\n\
float32 f\n\
float32 g\n\
float32 h\n\
float32 i\n\
\n\
";
  }

  static const char* value(const  ::beginner_tutorials::AddTwoIntsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::beginner_tutorials::AddTwoIntsRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::beginner_tutorials::AddTwoIntsResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::beginner_tutorials::AddTwoIntsResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::beginner_tutorials::AddTwoIntsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6800fddd4bf810897f1a5feb2ba6d4b2";
  }

  static const char* value(const  ::beginner_tutorials::AddTwoIntsResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6800fddd4bf81089ULL;
  static const uint64_t static_value2 = 0x7f1a5feb2ba6d4b2ULL;
};

template<class ContainerAllocator>
struct DataType< ::beginner_tutorials::AddTwoIntsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "beginner_tutorials/AddTwoIntsResponse";
  }

  static const char* value(const  ::beginner_tutorials::AddTwoIntsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::beginner_tutorials::AddTwoIntsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "trajData[] trajectory\n\
\n\
================================================================================\n\
MSG: beginner_tutorials/trajData\n\
float32 time\n\
float32 position\n\
float32 velocity\n\
float32 acceleration\n\
";
  }

  static const char* value(const  ::beginner_tutorials::AddTwoIntsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::beginner_tutorials::AddTwoIntsRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.a);
    stream.next(m.b);
    stream.next(m.c);
    stream.next(m.d);
    stream.next(m.e);
    stream.next(m.f);
    stream.next(m.g);
    stream.next(m.h);
    stream.next(m.i);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddTwoIntsRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::beginner_tutorials::AddTwoIntsResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.trajectory);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddTwoIntsResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<beginner_tutorials::AddTwoInts> {
  static const char* value() 
  {
    return "27ff5adccaca1d8baf20433bb5db9c3c";
  }

  static const char* value(const beginner_tutorials::AddTwoInts&) { return value(); } 
};

template<>
struct DataType<beginner_tutorials::AddTwoInts> {
  static const char* value() 
  {
    return "beginner_tutorials/AddTwoInts";
  }

  static const char* value(const beginner_tutorials::AddTwoInts&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<beginner_tutorials::AddTwoIntsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "27ff5adccaca1d8baf20433bb5db9c3c";
  }

  static const char* value(const beginner_tutorials::AddTwoIntsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<beginner_tutorials::AddTwoIntsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "beginner_tutorials/AddTwoInts";
  }

  static const char* value(const beginner_tutorials::AddTwoIntsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<beginner_tutorials::AddTwoIntsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "27ff5adccaca1d8baf20433bb5db9c3c";
  }

  static const char* value(const beginner_tutorials::AddTwoIntsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<beginner_tutorials::AddTwoIntsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "beginner_tutorials/AddTwoInts";
  }

  static const char* value(const beginner_tutorials::AddTwoIntsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // BEGINNER_TUTORIALS_SERVICE_ADDTWOINTS_H

