/* Auto-generated by genmsg_cpp for file /home/sahabi/ws/sandbox/quad_control/msg/trajData.msg */
#ifndef QUAD_CONTROL_MESSAGE_TRAJDATA_H
#define QUAD_CONTROL_MESSAGE_TRAJDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace quad_control
{
template <class ContainerAllocator>
struct trajData_ {
  typedef trajData_<ContainerAllocator> Type;

  trajData_()
  : time(0.0)
  , position(0.0)
  , velocity(0.0)
  , acceleration(0.0)
  {
  }

  trajData_(const ContainerAllocator& _alloc)
  : time(0.0)
  , position(0.0)
  , velocity(0.0)
  , acceleration(0.0)
  {
  }

  typedef float _time_type;
  float time;

  typedef float _position_type;
  float position;

  typedef float _velocity_type;
  float velocity;

  typedef float _acceleration_type;
  float acceleration;


  typedef boost::shared_ptr< ::quad_control::trajData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quad_control::trajData_<ContainerAllocator>  const> ConstPtr;
}; // struct trajData
typedef  ::quad_control::trajData_<std::allocator<void> > trajData;

typedef boost::shared_ptr< ::quad_control::trajData> trajDataPtr;
typedef boost::shared_ptr< ::quad_control::trajData const> trajDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::quad_control::trajData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::quad_control::trajData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace quad_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::quad_control::trajData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::quad_control::trajData_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::quad_control::trajData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1566d8b3c3f4d4ccd8818fec810e6523";
  }

  static const char* value(const  ::quad_control::trajData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1566d8b3c3f4d4ccULL;
  static const uint64_t static_value2 = 0xd8818fec810e6523ULL;
};

template<class ContainerAllocator>
struct DataType< ::quad_control::trajData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "quad_control/trajData";
  }

  static const char* value(const  ::quad_control::trajData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::quad_control::trajData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 time\n\
float32 position\n\
float32 velocity\n\
float32 acceleration\n\
";
  }

  static const char* value(const  ::quad_control::trajData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::quad_control::trajData_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::quad_control::trajData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.time);
    stream.next(m.position);
    stream.next(m.velocity);
    stream.next(m.acceleration);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct trajData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quad_control::trajData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::quad_control::trajData_<ContainerAllocator> & v) 
  {
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
    s << indent << "position: ";
    Printer<float>::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration);
  }
};


} // namespace message_operations
} // namespace ros

#endif // QUAD_CONTROL_MESSAGE_TRAJDATA_H

