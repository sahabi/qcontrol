/* Auto-generated by genmsg_cpp for file /home/sahabi/ws/sandbox/quad_control/msg/TrajArray.msg */
#ifndef QUAD_CONTROL_MESSAGE_TRAJARRAY_H
#define QUAD_CONTROL_MESSAGE_TRAJARRAY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "quad_control/Twist.h"
#include "quad_control/Vector3.h"
#include "quad_control/Pose.h"

namespace quad_control
{
template <class ContainerAllocator>
struct TrajArray_ {
  typedef TrajArray_<ContainerAllocator> Type;

  TrajArray_()
  : header()
  , velocity()
  , acceleration()
  , time()
  , position()
  {
  }

  TrajArray_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , velocity(_alloc)
  , acceleration(_alloc)
  , time(_alloc)
  , position(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector< ::quad_control::Twist_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::quad_control::Twist_<ContainerAllocator> >::other >  _velocity_type;
  std::vector< ::quad_control::Twist_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::quad_control::Twist_<ContainerAllocator> >::other >  velocity;

  typedef std::vector< ::quad_control::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::quad_control::Vector3_<ContainerAllocator> >::other >  _acceleration_type;
  std::vector< ::quad_control::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::quad_control::Vector3_<ContainerAllocator> >::other >  acceleration;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _time_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  time;

  typedef std::vector< ::quad_control::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::quad_control::Pose_<ContainerAllocator> >::other >  _position_type;
  std::vector< ::quad_control::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::quad_control::Pose_<ContainerAllocator> >::other >  position;


  typedef boost::shared_ptr< ::quad_control::TrajArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quad_control::TrajArray_<ContainerAllocator>  const> ConstPtr;
}; // struct TrajArray
typedef  ::quad_control::TrajArray_<std::allocator<void> > TrajArray;

typedef boost::shared_ptr< ::quad_control::TrajArray> TrajArrayPtr;
typedef boost::shared_ptr< ::quad_control::TrajArray const> TrajArrayConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::quad_control::TrajArray_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::quad_control::TrajArray_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace quad_control

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::quad_control::TrajArray_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::quad_control::TrajArray_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::quad_control::TrajArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5cfe93154dc27101e73a4984a4f1dcb4";
  }

  static const char* value(const  ::quad_control::TrajArray_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5cfe93154dc27101ULL;
  static const uint64_t static_value2 = 0xe73a4984a4f1dcb4ULL;
};

template<class ContainerAllocator>
struct DataType< ::quad_control::TrajArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "quad_control/TrajArray";
  }

  static const char* value(const  ::quad_control::TrajArray_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::quad_control::TrajArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
Twist[] velocity\n\
Vector3[] acceleration\n\
float64[] time\n\
Pose[] position\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: quad_control/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
================================================================================\n\
MSG: quad_control/Vector3\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: quad_control/Pose\n\
\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
================================================================================\n\
MSG: quad_control/Point\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: quad_control/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const  ::quad_control::TrajArray_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::quad_control::TrajArray_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::quad_control::TrajArray_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::quad_control::TrajArray_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.velocity);
    stream.next(m.acceleration);
    stream.next(m.time);
    stream.next(m.position);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TrajArray_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quad_control::TrajArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::quad_control::TrajArray_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::quad_control::Twist_<ContainerAllocator> >::stream(s, indent + "    ", v.velocity[i]);
    }
    s << indent << "acceleration[]" << std::endl;
    for (size_t i = 0; i < v.acceleration.size(); ++i)
    {
      s << indent << "  acceleration[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::quad_control::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.acceleration[i]);
    }
    s << indent << "time[]" << std::endl;
    for (size_t i = 0; i < v.time.size(); ++i)
    {
      s << indent << "  time[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.time[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::quad_control::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.position[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // QUAD_CONTROL_MESSAGE_TRAJARRAY_H

