# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from beginner_tutorials/TrajRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TrajRequest(genpy.Message):
  _md5sum = "025e67c629c573d32982a58fcfdb24b6"
  _type = "beginner_tutorials/TrajRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 init_pos
float32 final_pos
float32 init_vel
float32 final_vel
float32 init_acc
float32 final_acc
float32 init_time
float32 final_time
float32 sampling_rate

"""
  __slots__ = ['init_pos','final_pos','init_vel','final_vel','init_acc','final_acc','init_time','final_time','sampling_rate']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       init_pos,final_pos,init_vel,final_vel,init_acc,final_acc,init_time,final_time,sampling_rate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.init_pos is None:
        self.init_pos = 0.
      if self.final_pos is None:
        self.final_pos = 0.
      if self.init_vel is None:
        self.init_vel = 0.
      if self.final_vel is None:
        self.final_vel = 0.
      if self.init_acc is None:
        self.init_acc = 0.
      if self.final_acc is None:
        self.final_acc = 0.
      if self.init_time is None:
        self.init_time = 0.
      if self.final_time is None:
        self.final_time = 0.
      if self.sampling_rate is None:
        self.sampling_rate = 0.
    else:
      self.init_pos = 0.
      self.final_pos = 0.
      self.init_vel = 0.
      self.final_vel = 0.
      self.init_acc = 0.
      self.final_acc = 0.
      self.init_time = 0.
      self.final_time = 0.
      self.sampling_rate = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_9f.pack(_x.init_pos, _x.final_pos, _x.init_vel, _x.final_vel, _x.init_acc, _x.final_acc, _x.init_time, _x.final_time, _x.sampling_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.init_pos, _x.final_pos, _x.init_vel, _x.final_vel, _x.init_acc, _x.final_acc, _x.init_time, _x.final_time, _x.sampling_rate,) = _struct_9f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_9f.pack(_x.init_pos, _x.final_pos, _x.init_vel, _x.final_vel, _x.init_acc, _x.final_acc, _x.init_time, _x.final_time, _x.sampling_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.init_pos, _x.final_pos, _x.init_vel, _x.final_vel, _x.init_acc, _x.final_acc, _x.init_time, _x.final_time, _x.sampling_rate,) = _struct_9f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_9f = struct.Struct("<9f")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from beginner_tutorials/TrajResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import beginner_tutorials.msg

class TrajResponse(genpy.Message):
  _md5sum = "6800fddd4bf810897f1a5feb2ba6d4b2"
  _type = "beginner_tutorials/TrajResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """trajData[] trajectory

================================================================================
MSG: beginner_tutorials/trajData
float32 time
float32 position
float32 velocity
float32 acceleration
"""
  __slots__ = ['trajectory']
  _slot_types = ['beginner_tutorials/trajData[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       trajectory

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.trajectory is None:
        self.trajectory = []
    else:
      self.trajectory = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory:
        _x = val1
        buff.write(_struct_4f.pack(_x.time, _x.position, _x.velocity, _x.acceleration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.trajectory is None:
        self.trajectory = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory = []
      for i in range(0, length):
        val1 = beginner_tutorials.msg.trajData()
        _x = val1
        start = end
        end += 16
        (_x.time, _x.position, _x.velocity, _x.acceleration,) = _struct_4f.unpack(str[start:end])
        self.trajectory.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.trajectory)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory:
        _x = val1
        buff.write(_struct_4f.pack(_x.time, _x.position, _x.velocity, _x.acceleration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.trajectory is None:
        self.trajectory = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory = []
      for i in range(0, length):
        val1 = beginner_tutorials.msg.trajData()
        _x = val1
        start = end
        end += 16
        (_x.time, _x.position, _x.velocity, _x.acceleration,) = _struct_4f.unpack(str[start:end])
        self.trajectory.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4f = struct.Struct("<4f")
class Traj(object):
  _type          = 'beginner_tutorials/Traj'
  _md5sum = 'b34c5671dcf19005ee626e993664b8b1'
  _request_class  = TrajRequest
  _response_class = TrajResponse
